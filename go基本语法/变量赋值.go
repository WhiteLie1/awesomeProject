package main

import (
	"fmt"
	"math"
)

//func main() {
//	/*变量交换*/
//	var a int = 100
//	var b int = 200
//	var t int
//
//	t = a
//	a = b
//	b = t
//	fmt.Print(a,b)
//}

//func f(){}  内部声明屏蔽了外部声明
//var g = "g"
//func main(){
//	f := "f"
//	fmt.Print(f)// "f"; 局部变量 f shadows 包级别函数 f
//	fmt.Print(g)// "g"; 包级别变量
//	//fmt.Print(h) // 编译错误: undefined: h
//}

//func main(){
//	x := "Hello!"
//	for i := 0;i<len(x);i++{
//		x := x[i]
//		if x != '!' {
//			x := x + 'A' - 'a'
//			fmt.Printf("%c",x) //HELLO 每次迭代一个字母
//		}
//	}
//}
/*
import ( //画一个sin函数
	"image"
	"image/color"
	"image/png"
	"log"
	"math"
	"os"
)
func main(){
	//图片大小
	const size = 300
	//根据给定大小创建灰度图
	pic := image.NewGray(image.Rect(0,0,size,size))
	//遍历每个像素
	for x :=0;x<size;x++{
		for y :=0;y<size;y++{
			//填充为白色
			pic.SetGray(x,y,color.Gray{255})

		}
	}
	//从0 到最大像素生成x坐标
	for x := 0;x<size;x++{
		//让sin的值的范围在 0-2pi之间
		s :=float64(x)*2*math.Pi/size
		//sin的幅度为一半的橡树，向下偏移一半的像素并翻转
		y := size/2 - math.Sin(s)*size/2
		//用黑色绘制sin轨迹
		pic.SetGray(x,int(y),color.Gray{0})
	}
	//创建本地文件
	file,err := os.Create("sin.png")
	if err != nil {
		log.Fatal(err)
	}
	//使用png格式将数据写入文件中
	png.Encode(file,pic) //将image信息写入文件中
	//关闭文件
	file.Close()
}*/
/*
func main() { //helloworld的拼接功能
	s := "Hel"+"lo,"
	s += "World!"
	fmt.Print(s)
}*/
/*const codeTemplate = `// Generated by github.com/davyxu/cellnet/
protoc-gen-msg
// DO NOT EDIT!{{range .Protos}}
// Source: {{.Name}}{{end}}

package {{.PackageName}}

{{if gt .TotalMessages 0}}
import (
    "github.com/davyxu/cellnet"
    "reflect"
    _ "github.com/davyxu/cellnet/codec/pb"
)
{{end}}

func init() {
    {{range .Protos}}
    // {{.Name}}{{range .Messages}}
    cellnet.RegisterMessageMeta("pb","{{.FullName}}", reflect.TypeOf((*{{.Name}})(nil)).Elem(), {{.MsgID}})    {{end}}
    {{end}}
}
`*/

func main() {
	// 输出各数值范围 调用其自带的函数参数说明
	fmt.Println("int8 range:", math.MinInt8, math.MaxInt8)
	fmt.Println("int16 range:", math.MinInt16, math.MaxInt16)
	fmt.Println("int32 range:", math.MinInt32, math.MaxInt32)
	fmt.Println("int64 range:", math.MinInt64, math.MaxInt64)
	// 初始化一个32位整型值
	var a int32 = 1047483647
	// 输出变量的十六进制形式和十进制值
	fmt.Printf("int32: 0x%x %d\n", a, a)
	// 将a变量数值转换为十六进制, 发生数值截断
	b := int16(a)
	// 输出变量的十六进制形式和十进制值
	fmt.Printf("int16: 0x%x %d\n", b, b)
	// 将常量保存为float32类型
	var c float32 = math.Pi
	// 转换为int类型, 浮点发生精度丢失
	fmt.Println(int(c))
}